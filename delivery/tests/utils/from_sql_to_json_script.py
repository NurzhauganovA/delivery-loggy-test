import ast
import importlib.util
import json
import os
import re


def get_function_names(file_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º–µ–Ω–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""

    with open(f'{file_path}', "r", encoding="utf-8") as f:
        tree = ast.parse(f.read())
    return [
        node.name for node in ast.walk(tree)
        if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef))
    ]


def load_module_from_path(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å –∏–∑ .py —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏"""
    module_name = os.path.splitext(os.path.basename(file_path))[0]
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module


def process_sql_value(val_str: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ SQL-–∑–∞–ø—Ä–æ—Å–∞, –ø—Ä–∏–≤–æ–¥—è –µ–≥–æ –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É.
    –í–µ—Ä—Å–∏—è 5: –†–∞–∑–ª–∏—á–∞–µ—Ç –º–∞—Å—Å–∏–≤—ã –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –º–∞—Å—Å–∏–≤—ã –ø—Ä–æ—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    original_val = val_str.strip()

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã SQL
    if original_val.lower() == 'null':
        return None
    if original_val.lower() == 'true':
        return True
    if original_val.lower() == 'false':
        return False

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–π –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    if original_val.startswith("'") and original_val.endswith("'"):
        content_str = original_val[1:-1].replace("''", "'")
        content_stripped = content_str.strip()

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON-–æ–±—ä–µ–∫—Ç
        if content_stripped.startswith('{') and content_stripped.endswith('}'):
            try:
                return json.loads(content_stripped)
            except json.JSONDecodeError:
                pass  # –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

        # ----- –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–ê–°–°–ò–í–û–í -----
        if content_stripped.startswith('[') and content_stripped.endswith(']'):
            try:
                arr = json.loads(content_stripped)
                if not isinstance(arr, list): return content_stripped  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–∏—Å–æ–∫

                # –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç—ã (—Å–ª–æ–≤–∞—Ä–∏), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫
                if not arr or isinstance(arr[0], dict):
                    return arr
                # –ò–Ω–∞—á–µ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –ø—Ä–æ—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É "{...}"
                else:
                    return f"{{{','.join(map(str, arr))}}}"
            except (json.JSONDecodeError, IndexError):
                pass  # –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, —Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        return content_str

    # 3. –ï—Å–ª–∏ –∫–∞–≤—ã—á–µ–∫ –Ω–µ –±—ã–ª–æ, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —á–∏—Å–ª–æ
    try:
        return int(original_val)
    except (ValueError, TypeError):
        try:
            return float(original_val)
        except (ValueError, TypeError):
            return original_val


def split_sql_values(values_str: str):
    """
    –ù–∞–¥–µ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–µ–∫—Ü–∏–∏ VALUES.
    –í–µ—Ä—Å–∏—è 3: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç '' –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏.
    """
    values = []
    current_val = ""
    in_quotes = False
    i = 0
    n = len(values_str)
    while i < n:
        char = values_str[i]

        if not in_quotes:
            if char == "'":
                in_quotes = True
            elif char == ',':
                values.append(current_val.strip())
                current_val = ""
                i += 1
                continue
            current_val += char
        else:  # in_quotes is True
            if char == "'":
                if i + 1 < n and values_str[i + 1] == "'":
                    current_val += "''"
                    i += 1
                else:
                    in_quotes = False
            current_val += char
        i += 1

    values.append(current_val.strip())
    return values


def parse_and_save_inserts(sql_text, output_dir=None):
    """
    –ü–∞—Ä—Å–∏—Ç SQL INSERT-–∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON.
    """
    statements = [stmt.strip() for stmt in sql_text.strip().split(';') if stmt.strip()]
    inserts_by_table = {}

    for stmt in statements:
        if not stmt.lower().startswith("insert into"):
            continue

        insert_regex = re.compile(
            r"insert into\s+(?P<full_table_name>[\w`\"\[\].]+)\s*"
            r"\((?P<columns>[^)]+)\)\s*"
            r"values\s*\("
            r"(?P<values>.*)"
            r"\s*\)",
            re.IGNORECASE | re.DOTALL
        )
        match = insert_regex.search(stmt)
        if not match:
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å -> {stmt[:100]}...")
            continue

        table_name = match.group("full_table_name").split('.')[-1].strip('`"[]')

        columns_str = match.group("columns").replace('\n', '')
        columns = [col.strip().strip('`"[]') for col in columns_str.split(",")]

        values_str = match.group("values").replace('\n', ' ').strip()
        raw_values = split_sql_values(values_str)
        processed_values = [process_sql_value(v) for v in raw_values]

        if len(columns) != len(processed_values):
            print(
                f"‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ ({len(columns)}) –∏ –∑–Ω–∞—á–µ–Ω–∏–π ({len(processed_values)}) –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")
            continue

        row = dict(zip(columns, processed_values))
        inserts_by_table.setdefault(table_name, []).append(row)

    if output_dir is None:
        output_dir = os.getcwd()

    os.makedirs(output_dir, exist_ok=True)

    for table, rows in inserts_by_table.items():
        output_path = os.path.join(output_dir, f"{table}.json")
        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(rows, f, indent=4, ensure_ascii=False)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")


file_path = "conftest.py"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É

function_names = get_function_names(file_path)
module = load_module_from_path(file_path)

if function_names:
    print("–ò—Å–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏:")
    for func_name in function_names:
        if "insert_script" in func_name:
            func = getattr(module, func_name, None)
            result = func()

            parse_and_save_inserts(result, 'fixtures')
